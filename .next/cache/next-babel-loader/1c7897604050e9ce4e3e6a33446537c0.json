{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card } from '@shopify/polaris';\nimport store from 'store-js';\nconst GET_PRODUCTS_BY_ID = gql`\n query getProducts($ids:[ID!]){\n     nodes(ids:$ids){\n         ... on Product{\n             title\n             handle\n             descriptionHTML\n             id\n             images(first:1){\n                 edges{\n                     node{\n                         originalSrc\n                         altText\n                     }\n                 }\n             }\n             variantes(first:1){\n                 edges{\n                     nodes{\n                         price\n                         id\n                     }\n                 }\n             }\n         }\n     }\n }`;\n\nclass ResourceListWithProducts extends React.Component {\n  render() {\n    return __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get('ids')\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading ...\");\n      if (error) return __jsx(\"div\", null, error.message);\n      console.log(data);\n      return __jsx(Card, null, __jsx(\"p\", null, \"Stuff here\"));\n    });\n  }\n\n}\n\nexport default ResourceListWithProducts;\n/*\r\nMaking use of localstorgae for persisting data. \r\nOne can make use of store.js a corss browser JavaScript library for managing localStorage\r\nThis works well for testing the development app. If we were building app in production the app would require the data to be stored in databases. \r\n\r\nPolaris Empty state compoment is the first thing that the merchant will see on the main page of the application. \r\n\r\nAfter Selecting the first product the page can list the that one just built and add logic to tell the index file when to show the empty state and when to show resourc empty state and when to show the resource list. \r\n\r\n\r\n\r\n*/","map":{"version":3,"sources":["D:/shopify_app/components/ResourceList.js"],"names":["gql","Query","Card","store","GET_PRODUCTS_BY_ID","ResourceListWithProducts","React","Component","render","ids","get","data","loading","error","message","console","log"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,KAAR,QAAoB,cAApB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,kBAAkB,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;GAA/B;;AA4BA,MAAMK,wBAAN,SAAuCC,KAAK,CAACC,SAA7C,CAAsD;AAClDC,EAAAA,MAAM,GAAE;AACJ,WACI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEJ,kBAAd;AAAkC,MAAA,SAAS,EAAE;AAACK,QAAAA,GAAG,EAACN,KAAK,CAACO,GAAN,CAAU,KAAV;AAAL;AAA7C,OACK,CAAC;AAACC,MAAAA,IAAD;AAAMC,MAAAA,OAAN;AAAcC,MAAAA;AAAd,KAAD,KAAwB;AACrB,UAAID,OAAJ,EAAa,OAAO,iCAAP;AACb,UAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACC,OAAZ,CAAP;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,aACI,MAAC,IAAD,QACI,8BADJ,CADJ;AAKH,KAVL,CADJ;AAcH;;AAhBiD;;AAqBtD,eAAeN,wBAAf;AAGA","sourcesContent":["import gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Card} from '@shopify/polaris';\r\nimport store from 'store-js';\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n query getProducts($ids:[ID!]){\r\n     nodes(ids:$ids){\r\n         ... on Product{\r\n             title\r\n             handle\r\n             descriptionHTML\r\n             id\r\n             images(first:1){\r\n                 edges{\r\n                     node{\r\n                         originalSrc\r\n                         altText\r\n                     }\r\n                 }\r\n             }\r\n             variantes(first:1){\r\n                 edges{\r\n                     nodes{\r\n                         price\r\n                         id\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n     }\r\n }`\r\n\r\nclass ResourceListWithProducts extends React.Component{\r\n    render(){\r\n        return (\r\n            <Query query={GET_PRODUCTS_BY_ID} variables={{ids:store.get('ids')}}>\r\n                {({data,loading,error})=>{\r\n                    if (loading) return <div>Loading ...</div>\r\n                    if (error) return <div>{error.message}</div>\r\n                    console.log(data);\r\n                    return(\r\n                        <Card>\r\n                            <p>Stuff here</p>\r\n                        </Card>\r\n                    );\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n\r\n\r\n/*\r\nMaking use of localstorgae for persisting data. \r\nOne can make use of store.js a corss browser JavaScript library for managing localStorage\r\nThis works well for testing the development app. If we were building app in production the app would require the data to be stored in databases. \r\n\r\nPolaris Empty state compoment is the first thing that the merchant will see on the main page of the application. \r\n\r\nAfter Selecting the first product the page can list the that one just built and add logic to tell the index file when to show the empty state and when to show resourc empty state and when to show the resource list. \r\n\r\n\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}