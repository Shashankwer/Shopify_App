{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EmptyState, Layout, Page, TextStyle } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../components/ResourceList';\nvar img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      open: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function (resources) {\n      var idsFromResources = resources.selection.map(function (product) {\n        return product.id;\n      });\n\n      _this.setState({\n        open: false\n      }); //console.log(idsFromResources)\n\n\n      store.set('ids', idsFromResources);\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var emptyState = !store.get('ids');\n      return __jsx(Page, null, __jsx(TitleBar, {\n        title: \"Sample App\",\n        primaryAction: {\n          content: 'Select products',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resource) {\n          return _this2.handleSelection(resource);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Select products to start\",\n        action: {\n          content: 'Select products',\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        },\n        image: img\n      }, __jsx(\"p\", null, \"Select products and change their price temporarily\"))), __jsx(ResourceListWithProducts, null));\n    } //Passing data from the resource picker. \n\n    /*\r\n    At the point you should see the modal open and close with \r\n    your store's products displayed. If we select a product and click Select, then each product should be found in the console.log\r\n    \r\n    One will want to take those products and display the to merchants in a form, Eventially one will write a query to the Shopify GrapQL Admin API, \r\n    */\n\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["D:/shopify_app/pages/index.js"],"names":["EmptyState","Layout","Page","TextStyle","ResourcePicker","TitleBar","store","ResourceListWithProducts","img","Index","open","resources","idsFromResources","selection","map","product","id","setState","set","emptyState","get","content","onAction","state","resource","handleSelection","React","Component"],"mappings":";;;;;;;;;;;;;;AAAA,SAAQA,UAAR,EAAmBC,MAAnB,EAA0BC,IAA1B,EAA+BC,SAA/B,QAA+C,kBAA/C;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,2BAAzC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,IAAMC,GAAG,GAAG,mEAAZ;;IACMC,K;;;;;;;;;;;;;;;;4DACE;AAACC,MAAAA,IAAI,EAAC;AAAN,K;;sEA2CU,UAACC,SAAD,EAAc;AAC5B,UAAMC,gBAAgB,GAAGD,SAAS,CAACE,SAAV,CAAoBC,GAApB,CAAwB,UAACC,OAAD;AAAA,eAAWA,OAAO,CAACC,EAAnB;AAAA,OAAxB,CAAzB;;AACA,YAAKC,QAAL,CAAc;AAACP,QAAAA,IAAI,EAAC;AAAN,OAAd,EAF4B,CAG5B;;;AACAJ,MAAAA,KAAK,CAACY,GAAN,CAAU,KAAV,EAAgBN,gBAAhB;AACH,K;;;;;;;6BA/CQ;AAAA;;AACN,UAAMO,UAAU,GAAG,CAACb,KAAK,CAACc,GAAN,CAAU,KAAV,CAApB;AACD,aACA,MAAC,IAAD,QACI,MAAC,QAAD;AACA,QAAA,KAAK,EAAC,YADN;AAEA,QAAA,aAAa,EAAE;AAACC,UAAAA,OAAO,EAAC,iBAAT;AACEC,UAAAA,QAAQ,EAAC;AAAA,mBAAK,MAAI,CAACL,QAAL,CAAc;AAACP,cAAAA,IAAI,EAAC;AAAN,aAAd,CAAL;AAAA;AADX;AAFf,QADJ,EAQI,MAAC,cAAD;AACE,QAAA,YAAY,EAAC,SADf;AAEE,QAAA,YAAY,EAAE,KAFhB;AAGE,QAAA,IAAI,EAAE,KAAKa,KAAL,CAAWb,IAHnB;AAIE,QAAA,WAAW,EAAE,qBAACc,QAAD;AAAA,iBAAY,MAAI,CAACC,eAAL,CAAqBD,QAArB,CAAZ;AAAA,SAJf;AAKE,QAAA,QAAQ,EAAE;AAAA,iBAAI,MAAI,CAACP,QAAL,CAAc;AAACP,YAAAA,IAAI,EAAC;AAAN,WAAd,CAAJ;AAAA;AALZ,QARJ,EAgBI,MAAC,MAAD,QACI,MAAC,UAAD;AACA,QAAA,OAAO,EAAC,0BADR;AAEA,QAAA,MAAM,EAAE;AACJW,UAAAA,OAAO,EAAC,iBADJ;AAEJC,UAAAA,QAAQ,EAAC;AAAA,mBAAI,MAAI,CAACL,QAAL,CAAc;AAACP,cAAAA,IAAI,EAAC;AAAN,aAAd,CAAJ;AAAA;AAFL,SAFR;AAMA,QAAA,KAAK,EAAEF;AANP,SAQI,sEARJ,CADJ,CAhBJ,EA4BI,MAAC,wBAAD,OA5BJ,CADA;AAgCD,K,CACD;;AACA;;;;;;;;;;EAtCoBkB,KAAK,CAACC,S;;AAoD1B,eAAelB,KAAf","sourcesContent":["import {EmptyState,Layout,Page,TextStyle} from '@shopify/polaris';\r\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\r\nimport store from 'store-js';\r\nimport ResourceListWithProducts from '../components/ResourceList';\r\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\r\nclass Index extends React.Component {\r\nstate = {open:false};\r\nrender() {\r\n   const emptyState = !store.get('ids'); \r\n  return (  \r\n  <Page>\r\n      <TitleBar\r\n      title=\"Sample App\"\r\n      primaryAction={{content:'Select products',\r\n                       onAction:()=> this.setState({open:true}),\r\n                     }}\r\n      \r\n      />\r\n      <ResourcePicker\r\n        resourceType=\"Product\"\r\n        showVariants={false}\r\n        open={this.state.open}\r\n        onSelection={(resource)=>this.handleSelection(resource)}\r\n        onCancel={()=>this.setState({open:false})}\r\n        />\r\n\r\n      <Layout>\r\n          <EmptyState\r\n          heading=\"Select products to start\"\r\n          action={{\r\n              content:'Select products',\r\n              onAction:()=>this.setState({open:true}),\r\n          }}\r\n          image={img}\r\n          >\r\n              <p>Select products and change their price temporarily</p>\r\n          </EmptyState>\r\n      </Layout>\r\n      <ResourceListWithProducts/>\r\n  </Page>\r\n);\r\n}\r\n//Passing data from the resource picker. \r\n/*\r\nAt the point you should see the modal open and close with \r\nyour store's products displayed. If we select a product and click Select, then each product should be found in the console.log\r\n\r\nOne will want to take those products and display the to merchants in a form, Eventially one will write a query to the Shopify GrapQL Admin API, \r\n*/\r\nhandleSelection = (resources) =>{\r\n    const idsFromResources = resources.selection.map((product)=>product.id);\r\n    this.setState({open:false})\r\n    //console.log(idsFromResources)\r\n    store.set('ids',idsFromResources);\r\n};\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}