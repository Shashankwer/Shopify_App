{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery getProducts($ids:[ID!]!){\\n    nodes(ids:$ids){\\n        ... on Product{\\n            title\\n            handle\\n            descriptionHTML\\n            id\\n            images(first:1){\\n                edges{\\n                    node{\\n                        originalSrc\\n                        altText\\n                    }\\n                }\\n            }\\n            variants(first:1){\\n                edges{\\n                    node{\\n                        price\\n                        id\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card } from '@shopify/polaris';\nimport store from 'store-js';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nvar ResourceListWithProducts = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithProducts, _React$Component);\n\n  var _super = _createSuper(ResourceListWithProducts);\n\n  function ResourceListWithProducts() {\n    _classCallCheck(this, ResourceListWithProducts);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ResourceListWithProducts, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: store.get('ids')\n        }\n      }, function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading,\n            error = _ref.error;\n        if (loading) return __jsx(\"div\", null, \"Loading ...\");\n        if (error) return __jsx(\"div\", null, error.message);\n        console.log(data);\n        return __jsx(Card, null, __jsx(\"p\", null, \"Stuff here\"));\n      });\n    }\n  }]);\n\n  return ResourceListWithProducts;\n}(React.Component);\n\nexport default ResourceListWithProducts;\n/*\r\nMaking use of localstorgae for persisting data. \r\nOne can make use of store.js a corss browser JavaScript library for managing localStorage\r\nThis works well for testing the development app. If we were building app in production the app would require the data to be stored in databases. \r\n\r\nPolaris Empty state compoment is the first thing that the merchant will see on the main page of the application. \r\n\r\nAfter Selecting the first product the page can list the that one just built and add logic to tell the index file when to show the empty state and when to show resourc empty state and when to show the resource list. \r\n\r\n\r\n\r\n*/","map":{"version":3,"sources":["D:/shopify_app/components/ResourceList.js"],"names":["gql","Query","Card","store","GET_PRODUCTS_BY_ID","ResourceListWithProducts","ids","get","data","loading","error","message","console","log","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,KAAR,QAAoB,cAApB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;;IA8BMK,wB;;;;;;;;;;;;;6BACM;AACJ,aACI,MAAC,KAAD;AAAO,QAAA,KAAK,EAAED,kBAAd;AAAkC,QAAA,SAAS,EAAE;AAACE,UAAAA,GAAG,EAACH,KAAK,CAACI,GAAN,CAAU,KAAV;AAAL;AAA7C,SACK,gBAAwB;AAAA,YAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,YAAjBC,OAAiB,QAAjBA,OAAiB;AAAA,YAATC,KAAS,QAATA,KAAS;AACrB,YAAID,OAAJ,EAAa,OAAO,iCAAP;AACb,YAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACC,OAAZ,CAAP;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,eACI,MAAC,IAAD,QACI,8BADJ,CADJ;AAKH,OAVL,CADJ;AAcH;;;;EAhBkCM,KAAK,CAACC,S;;AAqB7C,eAAeV,wBAAf;AAGA","sourcesContent":["import gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Card} from '@shopify/polaris';\r\nimport store from 'store-js';\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\nquery getProducts($ids:[ID!]!){\r\n    nodes(ids:$ids){\r\n        ... on Product{\r\n            title\r\n            handle\r\n            descriptionHTML\r\n            id\r\n            images(first:1){\r\n                edges{\r\n                    node{\r\n                        originalSrc\r\n                        altText\r\n                    }\r\n                }\r\n            }\r\n            variants(first:1){\r\n                edges{\r\n                    node{\r\n                        price\r\n                        id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\n\r\nclass ResourceListWithProducts extends React.Component{\r\n    render(){\r\n        return (\r\n            <Query query={GET_PRODUCTS_BY_ID} variables={{ids:store.get('ids')}}>\r\n                {({data,loading,error})=>{\r\n                    if (loading) return <div>Loading ...</div>\r\n                    if (error) return <div>{error.message}</div>\r\n                    console.log(data);\r\n                    return(\r\n                        <Card>\r\n                            <p>Stuff here</p>\r\n                        </Card>\r\n                    );\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n\r\n\r\n/*\r\nMaking use of localstorgae for persisting data. \r\nOne can make use of store.js a corss browser JavaScript library for managing localStorage\r\nThis works well for testing the development app. If we were building app in production the app would require the data to be stored in databases. \r\n\r\nPolaris Empty state compoment is the first thing that the merchant will see on the main page of the application. \r\n\r\nAfter Selecting the first product the page can list the that one just built and add logic to tell the index file when to show the empty state and when to show resourc empty state and when to show the resource list. \r\n\r\n\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}