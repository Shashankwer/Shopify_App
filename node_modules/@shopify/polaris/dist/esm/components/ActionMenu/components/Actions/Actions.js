import { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React$1, { useRef, useState, useCallback, useMemo, useEffect } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import debounce$1 from 'lodash/debounce';
import { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';
import { classNames } from '../../../../utilities/css.js';
import { ButtonGroup as ButtonGroup$1 } from '../../../ButtonGroup/ButtonGroup.js';
import { sortAndOverrideActionOrder } from '../../utilities.js';
import { MenuAction as MenuAction$1 } from '../MenuAction/MenuAction.js';
import { SecondaryAction as SecondaryAction$1 } from '../SecondaryAction/SecondaryAction.js';
import { MenuGroup as MenuGroup$1 } from '../MenuGroup/MenuGroup.js';
import styles from './Actions.scss.js';

var ACTION_SPACING = 4;
function Actions({
  actions = [],
  groups = []
}) {
  var {
    newDesignLanguage
  } = useFeatures();
  var actionsLayoutRef = useRef(null);
  var menuGroupRef = useRef(null);
  var menuGroupWidthRef = useRef(0);
  var [actionWidths, setActionWidths] = useState([]);
  var [availableWidth, setAvailableWidth] = useState(0);
  var [activeMenuGroup, setActiveMenuGroup] = useState(undefined);
  var [showableActions, setShowableActions] = useState(null);
  var [hiddenActions, setHiddenActions] = useState([]);
  var handleOffsetWidth = useCallback(width => setActionWidths(actionWidths => [...actionWidths, width]), []);
  var handleMenuGroupToggle = useCallback(group => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);
  var handleMenuGroupClose = useCallback(() => setActiveMenuGroup(undefined), []);
  var handleResize = useMemo(() => debounce$1(() => {
    if (!newDesignLanguage || !actionsLayoutRef.current) return;
    setAvailableWidth(actionsLayoutRef.current.offsetWidth);
  }, 20, {
    leading: false,
    trailing: true,
    maxWait: 40
  }), [newDesignLanguage]);
  useEffect(() => {
    if (!actionsLayoutRef.current) return;
    setAvailableWidth(actionsLayoutRef.current.offsetWidth);
  }, [actionsLayoutRef]);
  useEffect(() => {
    var _menuGroupRef$current;

    if (!menuGroupRef.current) return;
    menuGroupWidthRef.current = (_menuGroupRef$current = menuGroupRef.current) == null ? void 0 : _menuGroupRef$current.offsetWidth;
  }, [menuGroupRef]);
  useEffect(() => {
    if (!newDesignLanguage || actionWidths.length === 0 || availableWidth === 0) return;
    var currentAvailableWidth = availableWidth;
    setShowableActions([]);
    setHiddenActions([]);
    actions.forEach((action, index) => {
      if (actionWidths[index] + menuGroupWidthRef.current + ACTION_SPACING <= currentAvailableWidth) {
        currentAvailableWidth -= actionWidths[index];
        setShowableActions(showableActions => [...(showableActions || []), action]);
      } else {
        currentAvailableWidth = 0;
        setHiddenActions(hiddenActions => [...hiddenActions, action]);
      }
    });
  }, [actionWidths, actions, availableWidth, newDesignLanguage]);
  var className = classNames(styles.ActionsLayout, newDesignLanguage && styles.newDesignLanguage);
  var menuActions = [...actions, ...groups];
  var overriddenActions = sortAndOverrideActionOrder(menuActions);
  var actionMarkup = overriddenActions.map((action, index) => {
    if ('title' in action) {
      var {
        title,
        actions: _actions
      } = action,
          _rest = _objectWithoutProperties(action, ["title", "actions"]);

      return _actions.length > 0 ? /*#__PURE__*/React$1.createElement("div", {
        key: "MenuGroup-".concat(index),
        ref: menuGroupRef
      }, /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({
        title: title,
        active: title === activeMenuGroup,
        actions: [...hiddenActions, ..._actions]
      }, _rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose
      }))) : null;
    }

    if (showableActions && showableActions.length >= 0) return null;

    var {
      content,
      onAction
    } = action,
        rest = _objectWithoutProperties(action, ["content", "onAction"]);

    return newDesignLanguage ? /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({
      key: index,
      onClick: onAction
    }, rest, {
      getOffsetWidth: handleOffsetWidth
    }), content) : /*#__PURE__*/React$1.createElement(MenuAction$1, Object.assign({
      key: "MenuAction-".concat(index),
      content: content,
      onAction: onAction
    }, rest));
  });
  return /*#__PURE__*/React$1.createElement("div", {
    className: className,
    ref: actionsLayoutRef
  }, newDesignLanguage ? /*#__PURE__*/React$1.createElement(ButtonGroup$1, {
    spacing: "extraTight"
  }, showableActions && showableActions.length > 0 ? showableActions.map(action => /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({
    key: action.content
  }, action, {
    getOffsetWidth: handleOffsetWidth
  }), action.content)) : null, actionMarkup) : actionMarkup, /*#__PURE__*/React$1.createElement(EventListener$1, {
    event: "resize",
    handler: handleResize
  }));
}

export { Actions };
